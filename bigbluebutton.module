<?php
/* 
Plugin Name: BigBlueButton
Plugin URI: http://blindsidenetworks.com/integration
Version: 1.0.0
Author: Blindside Networks
Author URI: http://blindsidenetworks.com/
Description: BigBlueButton is an open source web conferencing system. This module integrates BigBlueButton into Drupal allowing website administrators to create and manage meetings rooms that can be used by visitors and registred users. For more information on setting up your own BigBlueButton server or for using an external hosting provider visit http://bigbluebutton.org/support

   Copyright 2011 Blindside Networks

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Versions:
   1.0.0 		--  	Initial version written by Jesus Federico
                    	(email : jesus [a t ] 12 3i t DOT ca)
   
*/

include_once( "bbb_api/bbb_api.php" );
include_once( "bigbluebutton.admin.inc" );

/**
 * Implements hook_help().
 */
function bigbluebutton_help($path, $arg) {
  	switch ($path) {
    	case 'admin/help#bigbluebutton':
      		$output = '';
      		$output .= '<h3>' . t('About') . '</h3>';
      		$output .= '<p>' . t('The BigBlueButton module allows users to join a meeting room in a BigBlueButton server. In order to have access as attendee or moderator, users need to know the right password which is set up by administrators throught the administration dashboard. For more information on setting up your own BigBlueButton server or for using an external hosting provider visit <a href="@contact">http://bigbluebutton.org/support</a>.', array('@contact' => 'http://bigbluebutton.org/support')) . '</p>';
      		$output .= '<h3>' . t('Uses') . '</h3>';
      		$output .= '<dl>';
      		$output .= '<dt>' . t('User contact forms') . '</dt>';
	      	$output .= '<dd>' . t('Site users ...') . '</dd>';
      		$output .= '<dt>' . t('Site-wide contact forms') . '</dt>';
      		$output .= '<dd>' . t('The ...') . '</p>';
      		$output .= '<dt>' . t('Navigation') . '</dt>';
      		$output .= '<dd>' . t("When ...") . '</dd>';
      		$output .= '<dt>' . t('Customization') . '</dt>';
      		$output .= '<dd>' . t('If you...') . '</dd>';
      		$output .= '</dl>';
      		return $output;
    	case 'admin/config/system/bigbluebutton':
      		$output = '<p>' . t('Set up the general configuration on this page.') . '</p>';
      		return $output;
    	case 'admin/config/system/bigbluebutton/meeting_room':
      		$output = '<p>' . t('Add, edit, delete, enable/disable meeting rooms on this page.') . '</p>';
      		return $output;
  	}
}

/**
 * Implements hook_menu().
 */
function bigbluebutton_menu() {
  	$menu_offset = 4;

	$items['admin/config/system/bigbluebutton'] = array(
    	'title'				=> 'BigBlueButton configuration',
		'description' 		=> 'Set parameters to enable web conferencing system connectivity.',
    	'page callback'		=> 'drupal_get_form',
    	'page arguments' 	=> array('bigbluebutton_admin_settings'),
    	'access arguments'	=> array('administer bigbluebutton module'),
    	'file'				=> 'bigbluebutton.admin.inc',
  		);

  	$items['admin/config/system/bigbluebutton/settings'] = array(
    	'title' 			=> 'General settings',
    	'weight' 			=> -2,
    	'type' 				=> MENU_DEFAULT_LOCAL_TASK,
  		);

  	$items['admin/config/system/bigbluebutton/meeting_room'] = array(
    	'title' 			=> 'Meeting rooms',
    	'page callback' 	=> 'bigbluebutton_admin_meeting_room_list',
    	'weight' 			=> -1,
    	'type' 				=> MENU_LOCAL_TASK,
    	'access arguments' 	=> array('administer site configuration'),
    	'file' 				=> 'bigbluebutton.admin.inc',
  		);

 	$items['admin/config/system/bigbluebutton/meeting_room/list'] = array(
    	'title' 			=> 'List',
    	'type' 				=> MENU_DEFAULT_LOCAL_TASK,
  		);

  	$items['admin/config/system/bigbluebutton/meeting_room/add'] = array(
    	'title' 			=> 'Add Meeting room',
    	'page callback' 	=> 'drupal_get_form',
    	'page arguments' 	=> array('bigbluebutton_admin_meeting_room_form', 'add'),
    	'type' 				=> MENU_LOCAL_TASK + MENU_CONTEXT_INLINE,
    	'weight' 			=> 3,
    	'access arguments' 	=> array('administer site configuration'),
    	'file' 				=> 'bigbluebutton.admin.inc',
  		);

  	$items['admin/config/system/bigbluebutton/meeting_room/edit'] = array(
    	'title' 			=> 'Edit Meeting room configuration',
    	'page callback' 	=> 'drupal_get_form',
    	'page arguments' 	=> array('bigbluebutton_admin_meeting_room_form', 'edit'),
    	'weight'			=> 3,
    	'access arguments' 	=> array('administer site configuration'),
    	'file' 				=> 'bigbluebutton.admin.inc',
  		);

  	$items['admin/config/system/bigbluebutton/meeting_room/test'] = array(
    	'title' => 'Test Meeting room connectivity',
    	'page callback' => 'drupal_get_form',
    	'page arguments' => array('bigbluebutton_admin_meeting_room_test'),
    	'access arguments' => array('administer site configuration'),
    	'file' => 'bigbluebutton.admin.inc',
  		);

  	$items['admin/config/system/bigbluebutton/meeting_room/delete'] = array(
    	'title' 			=> 'Delete Meeting room',
    	'page callback' 	=> 'drupal_get_form',
    	'page arguments' 	=> array('bigbluebutton_admin_meeting_room_delete_form'),
    	'access arguments' 	=> array('administer site configuration'),
    	'file' 				=> 'bigbluebutton.admin.inc',
  		);

  		/*$items['admin/config/system/bigbluebutton/meeting_room/enable'] = array(
    		'title' 			=> 'Enable Meeting room',
    		'page callback' 	=> 'drupal_get_form',
    		'page arguments' 	=> array('bigbluebutton_admin_enable_disable', $menu_offset + 1, $menu_offset + 2),
    		'access arguments' 	=> array('administer site configuration'),
    		'file' 				=> 'bigbluebutton.admin.inc',
  			);*/

  		/*$items['admin/config/system/bigbluebutton/meeting_room/disable'] = array(
    		'title'				=> 'Disable Meeting room',
    		'page callback' 	=> 'drupal_get_form',
    		'page arguments' 	=> array('bigbluebutton_admin_enable_disable', $menu_offset + 1, $menu_offset + 2),
    		'access arguments' 	=> array('administer site configuration'),
    		'file' 				=> 'bigbluebutton.admin.inc',
  			); */
  
  	return $items;
}  //  End of bigbluebutton_menu().

/**
* Process annotation settings submission.
*/
function bigbluebutton_admin_settings_submit($form, $form_state) {

}  //  End of bigbluebutton_admin_settings_submit().


////////////// Block Definition  ////////////////////////

/**
* Implements hook_block_info().
*/
function bigbluebutton_block_info() {
	$blocks['bigbluebutton'] = array(
		'info' => t('BigBlueButton login form'),
		//'status' => FALSE,			//Activate this line before launch the beta release
		'status' => TRUE,   			//Delete this line before launch the beta release
		'region' => 'sidebar_first',	//Delete this line before launch the beta release
		'weight' => 0,
		'visibility' => 1,
		);
	return $blocks;
}

/**
* Implements hook_block_view().
*/
function bigbluebutton_block_view($delta = '') {
	switch ($delta) {
		case 'bigbluebutton':
			$block['title'] = t('BigBlueButton');
      		$block['content'] = drupal_render(drupal_get_form('bigbluebutton_join_block_form'));
			return $block;
			break;
	}
}

//Create the form
function bigbluebutton_join_block_form($form, &$form_state) {

	//Set meeting rooms available at $meeting_room_options[
	$meeting_rooms = db_select('meeting_room', 'm')
    	->fields('m', array('mid', 'meeting_room_name', 'attendee_pass', 'moderator_pass', 'wait_for_moderator'))
    	->orderBy('meeting_room_name')
    	->execute()
    	->fetchAll();
	foreach ( $meeting_rooms as $meeting_room )
		$meeting_room_options[$meeting_room->mid] = $meeting_room->meeting_room_name;

	//Form definition starts
	$form['bigbluebutton_meeting_room']['bigbluebutton_meeting_room_mid'] = array(
		'#title' => t('Meeting room'),
		'#type' => 'select',
		'#options' => $meeting_room_options,
		);		
  	$form['bigbluebutton_name'] = array(
    	'#type' => 'textfield',
		'#title' => t('Name'),
    	'#size' => 15,
  	);
  	$form['bigbluebutton_password'] = array(
    	'#type' => 'password',
		'#title' => t('Password'),
    	'#size' => 15,
  	);
  	$form['submit'] = array(
    	'#type' => 'submit',
    	'#value' => 'Join',
  	);
	
  	return $form;
}

//Create the form handler
function bigbluebutton_join_block_form_submit($form, &$form_state) {

	//---------------------------------------------------JOIN-----------------------------------------------
    $meeting_room = bigbluebutton_getMeeting_room($form_state['input']['bigbluebutton_meeting_room_mid']);
		
	$meetingID = $meeting_room['meeting_room_name'];
	$moderatorPW = $meeting_room['moderator_pass'];
	$attendeePW = $meeting_room['attendee_pass'];
	$meetingVersion = $meeting_room['meeting_version'];

//	$user_name = $GLOBALS['user']->name;
	$user_name = $form_state['input']['bigbluebutton_name'];
	$user_password = $form_state['input']['bigbluebutton_password'];

	//Validate the password
	if ( $user_password != $moderatorPW && $user_password != $attendeePW ) {
  		drupal_set_message(t("The password typed doesn't match neither the attendee password nor the moderator password registered."));

	} else {

		$url_val = variable_get('bigbluebutton_server_url', '');
		$salt_val = variable_get('bigbluebutton_server_salt', '');
	
		$logoutURL = $GLOBALS['_SERVER']['HTTP_REFERER'];

		//Calls create meeting on the bigbluebutton server
		$response = BigBlueButton::createMeetingArray($user_name, $meetingID."[".$meetingVersion."]", "", $moderatorPW, $attendeePW, $salt_val, $url_val, $logoutURL );

		$createNew = false;
		//Analyzes the bigbluebutton server's response
		if(!$response){//If the server is unreachable, then prompts the user of the necessary action
  			drupal_set_message(t('Unable to join the meeting room %meeting_room_name. Please check the url of the bigbluebutton server AND check to see if the bigbluebutton server is running.', array('%meeting_room_name' => $meeting_room['meeting_room_name'])));

		} else if( $response['returncode'] == 'FAILED' ) { //The meeting was not created
			if($response['messageKey'] == 'idNotUnique'){
				$createNew = true;
			} else if($response['messageKey'] == 'checksumError'){
  				drupal_set_message(t('A checksum error occured. Make sure you entered the correct salt.'));
			} else {
  				drupal_set_message(t($response['message']));
			}
		} else {
			//Everything is ok, let's join the meeting
			$bbb_joinURL = BigBlueButton::joinURL($meetingID."[".$meetingVersion."]", $user_name, $user_password, $salt_val, $url_val, $logoutURL );
			$form_state['redirect'] = $bbb_joinURL;
		}
	}
	//---------------------------------------------------END-------------------------------------------------
}


function bigbluebutton_getAllMeetingRooms() {

	$results = db_select('meeting_room', 'm')
    	->fields('m', array('mid', 'meeting_room_name', 'meeting_version', 'attendee_pass', 'moderator_pass', 'wait_for_moderator'))
    	->orderBy('meeting_room_name')
		->execute()
		->fetchAll();

    foreach( $results as $rowset )
  	$meeting_room = array(
    	'meeting_room_name' => $results[0]->meeting_room_name,
    	'meeting_version' => $results[0]->meeting_version,
    	'attendee_pass' => $results[0]->attendee_pass,
    	'moderator_pass' => $results[0]->moderator_pass,
    	'wait_for_moderator' => $results[0]->wait_for_moderator,
  		);

	return $meeting_room;
}

?>