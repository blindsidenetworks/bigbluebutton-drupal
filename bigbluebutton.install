<?php
/* 
Plugin Name: BigBlueButton BN
Plugin URI: http://blindsidenetworks.com/integration
Author: Blindside Networks
Author URI: http://blindsidenetworks.com/
Description: BigBlueButton is an open source web conferencing system. This module integrates BigBlueButton into Drupal allowing website administrators to create and manage meetings rooms that can be used by visitors and registred users. For more information on setting up your own BigBlueButton server or for using an external hosting provider visit http://bigbluebutton.org/support

   Copyright 2011 Blindside Networks

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Versions:
   7.x-1.0.x-dev	--  	Initial version written by Jesus Federico
                    		(email : jesus [a t ] b l i n d si de n  et w o rks DOT ca)
   
*/

/**
 * Implements hook_schema().
 */
function bigbluebutton_schema() {

  	$schema['meeting_room'] = array(
    	'description' => t('Meeting room form settings.'),
    	'fields' => array(
      		'mid' => array(
        		'type' => 'serial',
        		'unsigned' => TRUE,
        		'not null' => TRUE,
        		'description' => 'Primary Key: A unique ID for each registred meeting room.',
      			),
      		'meeting_room_name' => array(
        		'type' => 'char',
        		'length' => 64,
        		'not null' => TRUE,
        		'default' => '',
        		'description' => 'Meeting room name.',
      			),
      		'attendee_pass' => array(
        		'type' => 'char',
        		'length' => 32,
        		'not null' => TRUE,
        		'default' => '',
        		'description' => 'Attendee password.',
      			),
      		'moderator_pass' => array(
        		'type' => 'char',
        		'length' => 32,
        		'not null' => TRUE,
        		'default' => '',
        		'description' => 'Moderator password.',
      			),
      		'wait_for_moderator' => array(
        		'type' => 'int',
        		'not null' => TRUE,
        		'default' => 0,
        		'size' => 'tiny',
        		'description' => 'Flag to indicate whether or not attendees will wait for moderator to enter into rooms. (1 = Yes, 0 = No)',
      			),
    		),
    	'primary key' => array('mid'),
    	'indexes' => array(
      		'meeting_room_name' => array('meeting_room_name'),
    		),
  		);

  	return $schema;

}


/**
 * Implements hook_install().
 */
function bigbluebutton_install() {
  	// Insert a default contact category.
  	db_insert('meeting_room')
		->fields(array(
      		'meeting_room_name' => 'Demo Meeting',
      		'attendee_pass' => 'ap',
      		'moderator_pass' => 'mp',
      		'wait_for_moderator' => 0,
    		))
    	->execute();
    
	// Default roles to access meeting rooms
 	$roles = array_map('check_plain', user_roles(TRUE));

	if (!array_key_exists('bbb attendee', $roles)) {
  		$role = (object) array('name' => t('bbb attendee'));
    	user_role_save($role);
	}
	if (!array_key_exists('bbb moderator', $roles)) {
  		$role = (object) array('name' => t('bbb moderator'));
    	user_role_save($role);
	}
}

/**
 * Implementation of hook_uninstall().
 */
function bigbluebutton_uninstall() {
  	// Remove all Disqus-related variables.
  	db_delete('variable')->condition('name', 'bigbluebutton_%', 'LIKE')->execute();
  
  	variable_del('meeting_room');
  
	$roles = db_select('role', 'r')
    	->fields('r', array('rid', 'name', 'weight'))
    	->orderBy('rid')
		->execute()
		->fetchAll();

    foreach( $roles as $role ){
		if ( $role->name == 'bbb attendee' || $role->name == 'bbb moderator' ){
  			user_role_delete((int) $role->rid);
		}
	}
  
}


?>