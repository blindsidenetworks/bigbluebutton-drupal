<?php
/*
Plugin Name:   BigBlueButtonBN
Plugin URI:    http://blindsidenetworks.com/integration
Author:        Blindside Networks
Author URI:    http://www.blindsidenetworks.com/
Description:   BigBlueButton is an open source web conferencing system. This module integrates BigBlueButton into Drupal allowing website administrators to create and manage meetings rooms that can be used by visitors and registred users. For more information on setting up your own BigBlueButton server or for using an external hosting provider visit http://bigbluebuttonbn.org/support

Copyright 2011-2013 Blindside Networks

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Versions:
7.x-1.0.x-dev	--  	Initial version written by Jesus Federico
(email : jesus [a t ] b l i n d si de n  et w o rks DOT com)
 
*/

include_once( "bigbluebuttonbn.admin.inc" );

/**
 * Implements hook_help().
 */
function bigbluebuttonbn_help($path, $arg) {
    switch ($path) {
        case 'admin/help#bigbluebuttonbn':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('The BigBlueButton module allows users to join a meeting room in a BigBlueButton server. In order to have access as attendee or moderator, users need to know the right password which is set up by administrators throught the administration dashboard. For more information on setting up your own BigBlueButton server or for using an external hosting provider visit <a href="@contact">http://bigbluebuttonbn.org/support</a>.', array('@contact' => 'http://bigbluebuttonbn.org/support')) . '</p>';
            $output .= '<h3>' . t('Uses') . '</h3>';
            $output .= '<dl>';
            $output .= '<dt>' . t('User contact forms') . '</dt>';
            $output .= '<dd>' . t('Site users ...') . '</dd>';
            $output .= '<dt>' . t('Site-wide contact forms') . '</dt>';
            $output .= '<dd>' . t('The ...') . '</p>';
            $output .= '<dt>' . t('Navigation') . '</dt>';
            $output .= '<dd>' . t("When ...") . '</dd>';
            $output .= '<dt>' . t('Customization') . '</dt>';
            $output .= '<dd>' . t('If you...') . '</dd>';
            $output .= '</dl>';
            return $output;
        case 'admin/config/content/bigbluebuttonbn':
            $output = '<p>' . t('Set up the general configuration on this page.') . '</p>';
            return $output;
        case 'admin/config/content/bigbluebuttonbn/meeting':
            $output = '<p>' . t('Add, edit, delete, enable/disable meeting rooms on this page.') . '</p>';
            return $output;
    }
}


/**
 * Implementation of hook_permission()
 */
function bigbluebuttonbn_permission() {
    return array(
            'administer bigbluebuttonbn' => array(
                    'title' => t('Administer BigBluebuttonBN'),
                    'description' => t('Generally an administrative permission. Warning: Give to trusted roles only; this permission has security implications.'),
            ),
            'access bigbluebuttonbn meetings' => array(
                    'title' => t('Join meeting room'),
                    'description' => t('Allow users to access meeting rooms'),
            ),
            'moderate bigbluebuttonbn meetings' => array(
                    'title' => t('Join as moderator'),
                    'description' => t('Allow users to access meeting rooms as moderator when \'No password required\' has been granted'),
            ),
            'directaccess bigbluebuttonbn meetings' => array(
                    'title' => t('No password required'),
                    'description' => t('Allow users to join meetings without providing a password'),
            ),
            'access bigbluebuttonbn recordings' => array(
                    'title' => t('Access recordings'),
                    'description' => t('Allow users to access recordings'),
            ),
            'publish bigbluebuttonbn recordings' => array(
                    'title' => t('Publish/Unpublish recordings'),
                    'description' => t('Allow users to publish/unpublish recordings'),
            ),
            'delete bigbluebuttonbn recordings' => array(
                    'title' => t('Delete recordings'),
                    'description' => t('Allow users to publish/unpublish recordings'),
            ),
    );
}


function bigbluebuttonbn_access($op, $node, $account) {
    if ($op == 'access') {
        return user_access('access bigbluebuttonbn meetings', $account);
    }

    if ($op == 'moderate') {
        return user_access('moderate bigbluebuttonbn meetings', $account);
    }

    if ($op == 'directaccess') {
        return user_access('directaccess bigbluebuttonbn meetings', $account);
    }
    
}


/**
 * Implements hook_menu()
 */
function bigbluebuttonbn_menu() {
    $items['admin/config/content/bigbluebuttonbn'] = array(
            'title'            => 'BigBlueButtonBN',
            'description'      => 'Set parameters to enable web conferencing system connectivity.',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_admin_settings'),
            'access arguments' => array('administer bigbluebuttonbn'),
            'file'             => 'bigbluebuttonbn.admin.inc',
        );

    $items['admin/config/content/bigbluebuttonbn/settings'] = array(
            'title'            => 'General settings',
            'weight'           => -2,
            'type'             => MENU_DEFAULT_LOCAL_TASK,
  		);

    $items['admin/config/content/bigbluebuttonbn/meeting'] = array(
            'title'            => 'Meetings',
            'page callback'    => 'bigbluebuttonbn_admin_meeting_list',
            'weight'           => -1,
            'type'             => MENU_LOCAL_TASK,
            'access arguments' => array('administer bigbluebuttonbn'),
            'file'             => 'bigbluebuttonbn.admin.inc',
  		);

    $items['admin/config/content/bigbluebuttonbn/meeting/list'] = array(
            'title'            => 'List',
            'type'             => MENU_DEFAULT_LOCAL_TASK,
  		);

    $items['admin/config/content/bigbluebuttonbn/meeting/add'] = array(
            'title'            => 'Add Meeting',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_admin_meeting_form', 'add'),
            'type'             => MENU_LOCAL_TASK + MENU_CONTEXT_INLINE,
            'weight'           => 3,
            'access arguments' => array('administer bigbluebuttonbn'),
            'file'             => 'bigbluebuttonbn.admin.inc',
  		);

    $items['admin/config/content/bigbluebuttonbn/meeting/edit'] = array(
            'title'            => 'Edit Meeting',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_admin_meeting_form', 'edit'),
            'weight'           => 3,
            'access arguments' => array('administer bigbluebuttonbn'),
            'file'             => 'bigbluebuttonbn.admin.inc',
  		);

    $items['admin/config/content/bigbluebuttonbn/meeting/delete'] = array(
            'title'            => 'Delete Meeting',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_admin_meeting_delete_form'),
            'access arguments' => array('administer bigbluebuttonbn'),
            'file'             => 'bigbluebuttonbn.admin.inc',
        );

    $items['admin/config/content/bigbluebuttonbn/meeting/join'] = array(
            'title'            => 'Join Meeting',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_admin_meeting_join'),
            'access arguments' => array('administer bigbluebuttonbn'),
            'file'             => 'bigbluebuttonbn.admin.inc',
  		);

    $items['admin/config/content/bigbluebuttonbn/meeting/end'] = array(
            'title'            => 'End Meeting',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_admin_meeting_end_form'),
            'access arguments' => array('administer bigbluebuttonbn'),
            'file'             => 'bigbluebuttonbn.admin.inc',
        );

    $items['admin/config/content/bigbluebuttonbn/recording'] = array(
            'title'            => 'Recordings',
            'page callback'    => 'bigbluebuttonbn_admin_recording_list',
            'weight'           => -1,
            'type'             => MENU_LOCAL_TASK,
            'access arguments' => array('administer bigbluebuttonbn'),
            'file'             => 'bigbluebuttonbn.admin.inc',
        );

    $items['admin/config/content/bigbluebuttonbn/recording/list'] = array(
            'title'            => 'List',
            'type'             => MENU_DEFAULT_LOCAL_TASK,
        );

    $items['admin/config/content/bigbluebuttonbn/recording/show'] = array(
            'title'            => 'Publish/ Unpublish Recording',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_admin_recording_show'),
            'access arguments' => array('publish bigbluebuttonbn recordings'),
            'file'             => 'bigbluebuttonbn.admin.inc',
        );
        
    $items['admin/config/content/bigbluebuttonbn/recording/hide'] = array(
            'title'            => 'Publish/ Unpublish Recording',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_admin_recording_hide'),
            'access arguments' => array('publish bigbluebuttonbn recordings'),
            'file'             => 'bigbluebuttonbn.admin.inc',
        );
        
    $items['admin/config/content/bigbluebuttonbn/recording/delete'] = array(
            'title'            => 'Delete Recording',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_admin_recording_delete_form'),
            'access arguments' => array('delete bigbluebuttonbn recordings'),
            'file'             => 'bigbluebuttonbn.admin.inc',
        );


    //  These items are for internal use
    //  :Starts
    $items['bigbluebuttonbn/ping'] = array(
            'title'            => 'Ping',
            'page callback'    => 'bigbluebuttonbn_ping_response',
            'page arguments'   => array(2),
            'access callback'  => 'user_access',
            'access arguments' => array('access content'),
            'type'             => MENU_CALLBACK,
    );

    $items['bigbluebuttonbn/join'] = array(
            'title'            => 'Join',
            'page callback'    => 'bigbluebuttonbn_join_response',
            'page arguments'   => array(2),
            'access arguments' => array('access bigbluebuttonbn meetings'),
            'type'             => MENU_CALLBACK,
    );
    //  :Ends
    
    $items['bigbluebuttonbn/joinform'] = array(
            'title'            => 'BigBlueButtonBN',
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('bigbluebuttonbn_page_join_form'),
            //'access callback'  => 'bigbluebuttonbn_access',
            'access arguments' => array('access bigbluebuttonbn meetings'),
            //'type'             => MENU_SUGGESTED_ITEM,
            'type'             => MENU_NORMAL_ITEM,
        );

    $items['bigbluebuttonbn/recordings'] = array(
            'title'            => 'RecordingsBN',
            'page callback'    => 'bigbluebuttonbn_recordings_response',
            'page arguments'   => array(1),
            //'access callback'  => 'bigbluebuttonbn_access_recordings',
            'access arguments' => array('access bigbluebuttonbn recordings'),
    );

    $items['bigbluebuttonbn/bbblogout'] = array(
            'title'            => 'Ping',
            'page callback'    => 'bigbluebuttonbn_bbblogout_response',
            'page arguments'   => array(2),
            'access callback'  => 'user_access',
            'access arguments' => array('access content'),
            'type'             => MENU_CALLBACK,
    );
    

    return $items;
}  //  End of bigbluebuttonbn_menu().


/**
 * Process annotation settings submission.
 */
function bigbluebuttonbn_admin_settings_submit($form, $form_state) {

}  //  End of bigbluebuttonbn_admin_settings_submit().


////////////// Block Definition  ////////////////////////
/**
 * Implements hook_block_info().
 */
function bigbluebuttonbn_block_info() {
    $blocks['bigbluebuttonbn'] = array(
            'info'                  => t('BigBlueButtonBN'),
            'cache'                 => DRUPAL_NO_CACHE, 
            //'status'              => FALSE,			    //Activate this line before launch the beta release
            'status'                => TRUE,   			    //Delete this line before launch the beta release
            'region'                => 'sidebar_first',     //Delete this line before launch the beta release
            'weight'                => 0,
            'visibility'            => BLOCK_VISIBILITY_NOTLISTED,
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bigbluebuttonbn_block_view($delta = '') {
    switch ($delta) {
        case 'bigbluebuttonbn':
            $block['title'] = t('BigBlueButtonBN');
            $bigbluebuttonbn_block_join_form = drupal_get_form('bigbluebuttonbn_block_join_form');
            $block['content'] = drupal_render($bigbluebuttonbn_block_join_form);
            return $block;
            break;
    }
}

//Create the form for block_join
function bigbluebuttonbn_block_join_form($form, &$form_state) {
    if ( !user_access('access bigbluebuttonbn meetings') ){
        $form['bigbluebuttonbn_block_join_form']['bigbluebuttonbn_block_message'] = array(
            '#type' => 'item',
            '#title' => t('Access denied'),
            '#suffix' => t('You are not authorized to access this block.'),
        );
        return $form;
    }
    
    //Set meeting rooms available at $meeting_options[
    $meetings = bigbluebuttonbn_getAllMeetings();
    foreach ( $meetings as $meeting )
        $meeting_options[$meeting['mid']] = $meeting['meeting_name'];

    $user = $GLOBALS['user'];
    $bigbluebuttonbn_name = "";
    $bigbluebuttonbn_name_disabled = FALSE;
    $bigbluebuttonbn_showName = 'true';
    if ( $user->uid != 0 ){ // is not anonymous user
        $bigbluebuttonbn_name = $user->name;
        $bigbluebuttonbn_name_disabled = TRUE;
        $bigbluebuttonbn_showName = 'false';
    }

    $bigbluebuttonbn_password_disabled = FALSE;
    $bigbluebuttonbn_showPassword = 'true';
    
    if ( user_access('directaccess bigbluebuttonbn meetings') ){
        $bigbluebuttonbn_password_disabled = TRUE;
        $bigbluebuttonbn_showPassword = 'false';
    }
    
    //Form definition starts
    $form['bigbluebuttonbn_block_join_form']['bigbluebuttonbn_block_showName'] = array(
            '#type' => 'hidden',
            '#value' => $bigbluebuttonbn_showName,
    );
    $form['bigbluebuttonbn_block_join_form']['bigbluebuttonbn_block_showPassword'] = array(
            '#type' => 'hidden',
            '#value' => $bigbluebuttonbn_showPassword,
    );
    $form['bigbluebuttonbn_block_join_form']['bigbluebuttonbn_block_meeting_mid'] = array(
            '#title' => t('Meeting'),
            '#type' => 'select',
            '#options' => $meeting_options,
    );
    $form['bigbluebuttonbn_block_join_form']['bigbluebuttonbn_block_name'] = array(
            '#type' => 'textfield',
            '#title' => t('Name'),
            '#default_value' => t($bigbluebuttonbn_name),
            '#disabled' => $bigbluebuttonbn_name_disabled,
            '#size' => 15,
            '#states' => array(
                    'visible' => array(
                            ':input[name="bigbluebuttonbn_block_showName"]' => array('value' => 'true')
                    ),
            ),
    );
    $form['bigbluebuttonbn_block_join_form']['bigbluebuttonbn_block_password'] = array(
            '#type' => 'password',
            '#title' => t('Password'),
            '#disabled' => $bigbluebuttonbn_password_disabled,
            '#size' => 15,
            '#states' => array(
                    'visible' => array(
                            ':input[name="bigbluebuttonbn_block_showPassword"]' => array('value' => 'true')
                    ),
            ),
    );
    $form['bigbluebuttonbn_block_join_form']['bigbluebuttonbn_block_submit'] = array(
            '#type' => 'submit',
            '#value' => 'Join',
    );

    return $form;
}

//Create the form handler for block_join
function bigbluebuttonbn_block_join_form_submit($form, &$form_state) {
    $mid = $form_state['input']['bigbluebuttonbn_block_meeting_mid'];
    $meeting = bigbluebuttonbn_getMeeting($mid);
    
    $user = $GLOBALS['user'];
    if ( $user->uid != 0 ) // is not anonymous user
        $meeting['user_name'] = $user->name;
    else
        $meeting['user_name'] = $form_state['input']['bigbluebuttonbn_block_name'];

    //get meeting info
    if ( user_access('directaccess bigbluebuttonbn meetings') ) {
        if ( user_access('moderate bigbluebuttonbn meetings') ) {
            $meeting['user_password'] = $meeting['moderator_pass'];
        } else {
            $meeting['user_password'] = $meeting['attendee_pass'];
        }
    } else {
        $meeting['user_password'] = $form_state['input']['bigbluebuttonbn_block_password'];
    }
    
    $bbb_joinURL = bigbluebuttonbn_joinMeeting($meeting);
	if ( $bbb_joinURL != NULL ){
	    if ( $meeting['user_password'] == $meeting['attendee_pass'] && $meeting['wait_for_moderator'] == 1 ){
            //$form_state['redirect'] = "bigbluebuttonbn/join/".$mid."/".urlencode($bbb_joinURL);
            drupal_goto("bigbluebuttonbn/join/".$mid."/".urlencode($bbb_joinURL));
        } else {
		    //$form_state['redirect'] = $bbb_joinURL;
		    drupal_goto($bbb_joinURL);
        }
	}
    
}

//Create the form for page_join
function bigbluebuttonbn_page_join_form($form, &$form_state) {
    //Set meeting rooms available at $meeting_options[
    $meetings = bigbluebuttonbn_getAllMeetings();
    foreach ( $meetings as $meeting )
        $meeting_options[$meeting['meeting_id']] = $meeting['meeting_name'];

    $user = $GLOBALS['user'];
    $bigbluebuttonbn_name = "";
    $bigbluebuttonbn_name_disabled = FALSE;
    $bigbluebuttonbn_showName = 'true';
    if ( $user->uid != 0 ){ // is not anonymous user
        $bigbluebuttonbn_name = $user->name;
        $bigbluebuttonbn_name_disabled = TRUE;
        $bigbluebuttonbn_showName = 'false';
    }

    $bigbluebuttonbn_password_disabled = FALSE;
    $bigbluebuttonbn_showPassword = 'true';
    
    if ( user_access('directaccess bigbluebuttonbn meetings') ){
        $bigbluebuttonbn_password_disabled = TRUE;
        $bigbluebuttonbn_showPassword = 'false';
    }
    
    //Form definition starts
    $form['bigbluebuttonbn_page_join_form']['bigbluebuttonbn_page_showName'] = array(
            '#type' => 'hidden',
            '#value' => $bigbluebuttonbn_showName,
    );
    $form['bigbluebuttonbn_page_join_form']['bigbluebuttonbn_page_showPassword'] = array(
            '#type' => 'hidden',
            '#value' => $bigbluebuttonbn_showPassword,
    );
    $form['bigbluebuttonbn_page_join_form']['bigbluebuttonbn_page_meeting_mid'] = array(
            '#title' => t('Meeting'),
            '#type' => 'select',
            '#options' => $meeting_options,
    );
    $form['bigbluebuttonbn_page_join_form']['bigbluebuttonbn_page_name'] = array(
            '#type' => 'textfield',
            '#title' => t('Name'),
            '#default_value' => t($bigbluebuttonbn_name),
            '#disabled' => $bigbluebuttonbn_name_disabled,
            '#size' => 15,
            '#states' => array(
                    'visible' => array(
                            ':input[name="bigbluebuttonbn_page_showName"]' => array('value' => 'true')
                    ),
            ),
    );
    $form['bigbluebuttonbn_page_join_form']['bigbluebuttonbn_page_password'] = array(
            '#type' => 'password',
            '#title' => t('Password'),
            '#disabled' => $bigbluebuttonbn_password_disabled,
            '#size' => 15,
            '#states' => array(
                    'visible' => array(
                            ':input[name="bigbluebuttonbn_page_showPassword"]' => array('value' => 'true')
                    ),
            ),
    );
    $form['bigbluebuttonbn_page_join_form']['submit'] = array(
            '#type' => 'submit',
            '#value' => 'Join',
    );
    
    return $form;
    
}

//Create the form handler for page_join
function bigbluebuttonbn_page_join_form_submit($form, &$form_state) {
    $mid = $form_state['input']['bigbluebuttonbn_page_meeting_mid'];
    $meeting = bigbluebuttonbn_getMeeting($mid);
    
    $user = $GLOBALS['user'];
    if ( $user->uid != 0 ) // is not anonymous user
        $meeting['user_name'] = $user->name;
    else
        $meeting['user_name'] = $form_state['input']['bigbluebuttonbn_page_name'];

    //get meeting info
    if ( user_access('directaccess bigbluebuttonbn meetings') ) {
        if ( user_access('moderate bigbluebuttonbn meetings') ) {
            $meeting['user_password'] = $meeting['moderator_pass'];
        } else {
            $meeting['user_password'] = $meeting['attendee_pass'];
        }
    } else {
        $meeting['user_password'] = $form_state['input']['bigbluebuttonbn_page_password'];
    }

    $bbb_joinURL = bigbluebuttonbn_joinMeeting($meeting);
	if ( $bbb_joinURL != NULL ){
	    if ( $meeting['user_password'] == $meeting['attendee_pass'] && $meeting['wait_for_moderator'] == 1 ){
            drupal_goto("bigbluebuttonbn/join/".$mid."/".urlencode($bbb_joinURL));
        } else {
		    drupal_goto($bbb_joinURL);
        }
	}
    
}

function bigbluebuttonbn_join_response($action, $mid, $joinURL) {
    
    $URL = variable_get('bigbluebuttonbn_server_url', 'http://test-install.blindsidenetworks.com/bigbluebutton/');
    $SALT = variable_get('bigbluebuttonbn_server_salt', '8cd8ef52e8e101574e400365b55e11a6');
    
    global $base_path;
    global $base_root;

    $meeting = bigbluebuttonbn_getMeeting($mid);

    $output = '';

    $bigbluebuttonbn_pingURL = $base_root.url('bigbluebuttonbn/ping/'.$meeting['meeting_id']);
    $bigbluebuttonbn_joinURL = urldecode($joinURL);

    //Link this one to the right parameter
    drupal_add_js(array('bigbluebuttonbn_waitformoderator' => $meeting['wait_for_moderator']?'true':'false' ), 'setting');
    drupal_add_js(array('bigbluebuttonbn_newwindow' => $meeting['newwindow']?'true':'false' ), 'setting');
    
    $output .= '
    <script type="text/javascript">
        function bigbluebutton_ping() {
            jQuery.ajax({
                url : "'.$bigbluebuttonbn_pingURL.'",
                async : true,
                dataType : "xml",
                success : function(xmlDoc){
                    $xml = jQuery( xmlDoc ), $running = $xml.find( "running" );
                    if($running.text() == "true"){
                        window.location = "'.$bigbluebuttonbn_joinURL.'";
                    }
                },
                error : function(xmlHttpRequest, status, error) {
                    console.debug(xmlHttpRequest);
                }
            });

        }

        setInterval("bigbluebutton_ping()", 5000);
    </script>';

    $output .= 	"<div align=center>"."\n";
    $output .=	"<br />The virtual class has not started yet. Waiting until a moderator joins<br /><br />"."\n";
    $output .= 	"<center><img src='".$base_path.drupal_get_path('module', 'bigbluebuttonbn')."/pix/polling.gif'></center>"."\n";

    return $output;
}


function bigbluebuttonbn_ping_response($action, $meeting_id) {
    $URL = variable_get('bigbluebuttonbn_server_url', 'http://test-install.blindsidenetworks.com/bigbluebutton/');
    $SALT = variable_get('bigbluebuttonbn_server_salt', '8cd8ef52e8e101574e400365b55e11a6');
    
    drupal_add_http_header('Content-Type', 'application/xml');

    echo BigBlueButtonBN::getMeetingXML( $meeting_id, $URL, $SALT );
}

function bigbluebuttonbn_bbblogout_response($action, $meeting_id) {
    $URL = variable_get('bigbluebuttonbn_server_url', 'http://test-install.blindsidenetworks.com/bigbluebutton/');
    $SALT = variable_get('bigbluebuttonbn_server_salt', '8cd8ef52e8e101574e400365b55e11a6');

    drupal_add_http_header('Content-Type', 'application/xml');

    echo BigBlueButtonBN::getMeetingXML( $meeting_id, $URL, $SALT );
}

function bigbluebuttonbn_recordings_response($action, $format = 'html') {

    return bigbluebuttonbn_recording_list();

}

/**
 * Recording list tab.
 */
function bigbluebuttonbn_recording_list() {
    $URL = variable_get('bigbluebuttonbn_server_url', '');
    $SALT = variable_get('bigbluebuttonbn_server_salt', '');

    // Initialize table headers
    $header = array(
            t('Recording'),
            t('Meeting Room Name'),
            t('Date'),
            t('Duration'),
  		);
    if( user_access('publish bigbluebuttonbn recordings') || user_access('delete bigbluebuttonbn recordings') ) {
        array_push($header, array('data' => t('Operations'), 'colspan' => 2));
    }
    // Initialize rows array
    $rows = array();

    // Initializes recordng list array.
    $recordings = array();
    // Get all the recordings from the database.
    $recordingsArray = bigbluebuttonbn_getAllRecordings();
    if( $recordingsArray && $recordingsArray['returncode'] == 'SUCCESS' && !$recordingsArray['messageKey'] ){
        $recordings = $recordingsArray['recordings'];
    }
    
    // Loop through the meeting rooms and add them to the table.
    $i = 0;
    foreach ($recordings as $recording) {
        /// Prepare playback recording links
        $type = '';
        foreach ( $recording['playbacks'] as $playback ){
            $type .= '<a href="'.$playback['url'].'" target="_new">'.$playback['type'].'</a>&#32;';
        }
        
        /// Prepare actionbar
        $bloginfourl = '.';
        $action = ($recording['published'] == 'true')? 'Hide': 'Show';
        $publishLink = l(t($action), 'admin/config/content/bigbluebuttonbn/recording/'.strtolower($action).'/'. $recording['recordID']);
        $deleteLink = l(t('Delete'), 'admin/config/content/bigbluebuttonbn/recording/delete/'.$recording['recordID']);
        
        /// Prepare duration
        $endTime = isset($recording['endTime'])? intval(str_replace('"', '\"', $recording['endTime'])):0;
        $endTime = $endTime - ($endTime % 1000);
        $startTime = isset($recording['startTime'])? intval(str_replace('"', '\"', $recording['startTime'])):0;
        $startTime = $startTime - ($startTime % 1000);
        $duration = intval(($endTime - $startTime) / 60000);
        
        /// Prepare date
        //Make sure the startTime is timestamp
        if( !is_numeric($recording['startTime']) ){
            $date = new DateTime($recording['startTime']);
            $recording['startTime'] = date_timestamp_get($date);
        } else {
            $recording['startTime'] = ($recording['startTime'] - $recording['startTime'] % 1000) / 1000;
        }
        
        //Format the date
        $formatedStartDate = gmdate("M d Y H:i:s", $recording['startTime']);
        //$formatedStartDate = date_i18n( "M d Y H:i:s", $recording['startTime'], false );
        
        $rows[$i] = array(
                $type,
                $recording['meetingName'],
                $formatedStartDate,
                $duration.' min'
        );
        if( user_access('publish bigbluebuttonbn recordings') ) {
            array_push($rows[$i], $publishLink);
        }
        if( user_access('delete bigbluebuttonbn recordings') ) {
            array_push($rows[$i], $deleteLink);
        }
        $i++;
        
        
    }

    if (!$rows) {
        $rows[] = array(array(
                'data' => t('No recordings available.'),
                'colspan' => 5,
        ));
    }

    $build['recording__table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
    );

    return $build;

}

function bigbluebuttonbn_ismoderator(){
    $user = $GLOBALS['user'];
    return user_access('moderate bigbluebuttonbn meetings');
    
}

//---------------------------------------------------UTILS-----------------------------------------------
function bigbluebuttonbn_joinMeeting($meeting){

    $bbb_joinURL = NULL;

    $meetingID = $meeting['meeting_id'];
    $meetingName = $meeting['meeting_name'];
    $moderatorPW = $meeting['moderator_pass'];
    $attendeePW = $meeting['attendee_pass'];
    $welcome = $meeting['welcome'];
    $welcome = (( !isset($meeting['welcome']) || $meeting['welcome'] == '')? "Welcome to [$meetingName] Meeting Room.": $meeting['welcome'])."<br>";
    $record = $meeting['record'] == 1? 'true': 'false';
    $welcome .= $record == 'true'? "<br><b>This meeting is being recorded.</b><br>": '';
    $duration = $meeting['duration'];
    $welcome .= $duration > 0? "<br><b>The maximum duration for this meeting is ".$duration." minutes.</b><br>": '';
    $description = $meeting['description'];

    $URL = variable_get('bigbluebuttonbn_server_url', '');
    $SALT = variable_get('bigbluebuttonbn_server_salt', '');
    //$logoutURL = $GLOBALS['base_url'];
    $logoutURL = $_SERVER['HTTP_REFERER'];
    
    $user_name = $meeting['user_name'];
    $user_password = $meeting['user_password'];

    //Validate the password
    if ( $user_password != $moderatorPW && $user_password != $attendeePW ) {
        drupal_set_message(t("The password typed doesn't match neither the attendee password nor the moderator password registered."));

    } else {
        //Calls create meeting on the bigbluebutton server
        if ( !BigBlueButtonBN::isMeetingCreated( $meetingID, $URL, $SALT ) ){
            $response = BigBlueButtonBN::createMeetingArray($meetingName, $meetingID, $attendeePW, $moderatorPW,  $URL, $SALT, $logoutURL, $welcome, $record, $duration, 0, array("meta_description" => $description, "meta_email" => '') );

            //Analyzes the bigbluebutton server's response
            if(!$response){//If the server is unreachable, then prompts the user of the necessary action
                drupal_set_message(t('Unable to join the meeting room %meeting_name. Please check the url of the bigbluebutton server AND check to see if the bigbluebutton server is running.', array('%meeting_name' => $meeting['meeting_name'])));
                return;
            } else if( $response['returncode'] == 'FAILED' ) { //The meeting was not created
                if($response['messageKey'] == 'checksumError'){
                    drupal_set_message(t('A checksum error occured. Make sure you entered the correct salt.'));
                } else {
                    drupal_set_message(t($response['message']));
                }
                return;
            } else {
                if( !isset($response['messageKey']) || $response['messageKey'] == '' ){
                    // The meeting was just created, insert the create event to the log
                    db_insert('bigbluebuttonbn_logs')
                    ->fields(array(
                            'meeting_id' => $meetingID,
                            'record' => $record? 1: 0,
                            'timestamp' => time(),
                            'event' => 'Create',
                    ))
                    ->execute();
                }

                $bbb_joinURL = BigBlueButtonBN::joinURL($meetingID, $user_name, $user_password, $URL, $SALT, $logoutURL );
            }
        } else  {
            $bbb_joinURL = BigBlueButtonBN::joinURL($meetingID, $user_name, $user_password, $URL, $SALT, $logoutURL );
        }
    }
    return $bbb_joinURL;
}


function bigbluebuttonbn_getMeeting($mid = NULL) {

    $meeting = array(
            'mid' => '',
            'meeting_id' => '',
            'meeting_name' => '',
            'attendee_pass' => '',
            'moderator_pass' => '',
            'wait_for_moderator' => 0,
            'newwindow' => 0,
            'record' => 0,
            'duration' => 0,
            'description' => '',
            'welcome' => '',
    );

    if ( $mid != NULL ) {
        $results = db_select('bigbluebuttonbn', 'm')
        ->fields('m', array('mid', 'meeting_id', 'meeting_name', 'attendee_pass', 'moderator_pass', 'wait_for_moderator', 'newwindow', 'record', 'duration', 'description', 'welcome'))
        ->condition('mid', $mid, '=')
        ->orderBy('meeting_name')
        ->execute()
        ->fetchAll();

        if ( $results != NULL ) {
            $meeting = array(
                    'mid' => $results[0]->mid,
                    'meeting_id' => $results[0]->meeting_id,
                    'meeting_name' => $results[0]->meeting_name,
                    'attendee_pass' => $results[0]->attendee_pass,
                    'moderator_pass' => $results[0]->moderator_pass,
                    'wait_for_moderator' => $results[0]->wait_for_moderator,
                    'newwindow' => $results[0]->newwindow,
                    'record' => $results[0]->record,
                    'duration' => $results[0]->duration,
                    'description' => $results[0]->description,
                    'welcome' => $results[0]->welcome,
            );
        }
    }

    return $meeting;

}


function bigbluebuttonbn_getAllMeetings() {

    $results = db_select('bigbluebuttonbn', 'm')
    ->fields('m', array('mid', 'meeting_id', 'meeting_name', 'attendee_pass', 'moderator_pass', 'wait_for_moderator', 'newwindow', 'record', 'duration', 'description', 'welcome'))
    ->orderBy('meeting_name')
    ->execute()
    ->fetchAll();

    foreach( $results as $rowset ) {
        $meetings_[$rowset->mid] = array(
                'mid' => $rowset->mid,
                'meeting_id' => $rowset->meeting_id,
                'meeting_name' => $rowset->meeting_name,
                'attendee_pass' => $rowset->attendee_pass,
                'moderator_pass' => $rowset->moderator_pass,
                'wait_for_moderator' => $rowset->wait_for_moderator,
                'newwindow' => $rowset->newwindow,
                'record' => $rowset->record,
                'duration' => $rowset->duration,
                'description' => $rowset->description,
                'welcome' => $rowset->welcome,
        );
    }

    return $meetings_;
}

function bigbluebuttonbn_getAllRecordings() {

    $URL = variable_get('bigbluebuttonbn_server_url', '');
    $SALT = variable_get('bigbluebuttonbn_server_salt', '');

    $results = db_select('bigbluebuttonbn_logs', 'm')
    ->fields('m', array('id', 'meeting_id', 'record', 'timestamp', 'event'))
    ->distinct()
    ->condition('event', 'Create', '=')
    ->condition('record', 1, '=')
    ->orderBy('timestamp')
    ->execute()
    ->fetchAll();

    $meetingIds = '';
    foreach( $results as $rowset ) {
        if ( strlen($meetingIds) > 0 ) $meetingIds .= ',';
        $meetingIds .= $rowset->meeting_id;
    }
    if( $meetingIds != '')
        $recordings = BigBlueButtonBN::getRecordingsArray($meetingIds, $URL, $SALT);
    else
        $recordings = array();

    return $recordings;
}

/***
 * Any other bigbluebuttonbn functions go here.  Each of them must have a name that
* starts with bigbluebuttonbn_
* Remember (see note in first lines) that, if this section grows, it's HIGHLY
* recommended to move all funcions below to a new "localib.php" file.
**
*  Function taken from http://www.php.net/manual/en/function.mt-rand.php
*  modified by Sebastian Schneider
*  credits go to www.mrnaz.com
*/
function bigbluebuttonbn_rand_string($len, $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
{
    $string = '';
    for ($i = 0; $i < $len; $i++)
    {
        $pos = rand(0, strlen($chars)-1);
        $string .= $chars{$pos};
    }
    return (sha1($string));
}



?>